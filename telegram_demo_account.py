import os
import asyncio
import logging
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import matplotlib.pyplot as plt
import pandas as pd
import io
from datetime import datetime
import threading
import time
import signal
import sys

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from demo_account import demo_account, format_account_info, format_account_stats, format_trade_history
from integration import check_signals_and_process, get_current_price

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('demo_account_bot')

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# URL –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥)
WEBAPP_URL = os.environ.get('WEBAPP_URL', 'https://trading-bot-i36i.onrender.com')

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–æ–º–∞–Ω–¥ –¥–µ–º–æ-—Å—á–µ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
CMD_PREFIX = "demo_"

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def demo_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–µ–º–æ-—Å—á–µ—Ç–∞", web_app=WebAppInfo(url=f"{WEBAPP_URL}/"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ-—Å—á–µ—Ç–æ–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/{CMD_PREFIX}balance - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        f"/{CMD_PREFIX}stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—á–µ—Ç–∞\n"
        f"/{CMD_PREFIX}trades - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫\n"
        f"/{CMD_PREFIX}chart - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞\n"
        f"/{CMD_PREFIX}check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        f"/{CMD_PREFIX}price - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É EURUSD\n"
        f"/{CMD_PREFIX}reset - –°–±—Ä–æ—Å–∏—Ç—å –¥–µ–º–æ-—Å—á–µ—Ç\n"
        f"/{CMD_PREFIX}help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

async def demo_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    await update.message.reply_text(
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–µ–º–æ-—Å—á–µ—Ç–∞*\n\n"
        f"/{CMD_PREFIX}balance - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ\n"
        f"/{CMD_PREFIX}stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—á–µ—Ç–∞ (–≤–∏–Ω—Ä–µ–π—Ç, –ø—Ä–æ—Ñ–∏—Ç, –ø—Ä–æ—Å–∞–¥–∫–∞ –∏ —Ç.–¥.)\n"
        f"/{CMD_PREFIX}trades - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫\n"
        f"/{CMD_PREFIX}chart - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n"
        f"/{CMD_PREFIX}check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        f"/{CMD_PREFIX}price - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É EURUSD\n"
        f"/{CMD_PREFIX}reset - –°–±—Ä–æ—Å–∏—Ç—å –¥–µ–º–æ-—Å—á–µ—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é\n"
        f"/{CMD_PREFIX}help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
        parse_mode="Markdown"
    )

async def demo_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ."""
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–º–æ-—Å—á–µ—Ç–µ...")
    
    try:
        account_info = await demo_account.get_account_info()
        formatted_info = format_account_info(account_info)
        
        await update.message.reply_text(
            formatted_info,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def demo_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—á–µ—Ç–∞."""
    await update.message.reply_text("‚è≥ –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–º–æ-—Å—á–µ—Ç–∞...")
    
    try:
        stats = await demo_account.get_account_stats()
        formatted_stats = format_account_stats(stats)
        
        await update.message.reply_text(
            formatted_stats,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—á–µ—Ç–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def demo_trades(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫."""
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –¥–µ–º–æ-—Å—á–µ—Ç–∞...")
    
    try:
        trades = await demo_account.get_trade_history(limit=10)
        formatted_trades = format_trade_history(trades)
        
        await update.message.reply_text(
            formatted_trades,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def demo_chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."""
    await update.message.reply_text("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–µ–º–æ-—Å—á–µ—Ç–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
        balance_history = await demo_account.get_balance_history()
        
        if not balance_history:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        df = pd.DataFrame(balance_history)
        df['date'] = pd.to_datetime(df['date'])
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot(df['date'], df['balance'], marker='o', linestyle='-', color='blue')
        plt.title('–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–µ–º–æ-—Å—á–µ—Ç–∞')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ë–∞–ª–∞–Ω—Å ($)')
        plt.grid(True)
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_photo(
            photo=buf,
            caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞ –¥–µ–º–æ-—Å—á–µ—Ç–∞\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${df['balance'].iloc[-1]:.2f}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def demo_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–µ–º–æ-—Å—á–µ—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="demo_reset_confirm"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="demo_reset_cancel")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–µ–º–æ-—Å—á–µ—Ç?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏ –≤–µ—Ä–Ω–µ—Ç –±–∞–ª–∞–Ω—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.",
        reply_markup=reply_markup
    )

async def demo_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã."""
    await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        await check_signals_and_process()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        trades = await demo_account.get_trade_history(limit=5)
        open_trades = [t for t in trades if t.get('status') == 'OPEN']
        
        if open_trades:
            message = "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã! –û—Ç–∫—Ä—ã—Ç—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ:\n\n"
            for trade in open_trades:
                message += (
                    f"üîπ *{trade['symbol']}* ({trade['timeframe']})\n"
                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade['direction']}\n"
                    f"–í—Ö–æ–¥: {trade['entry_price']:.5f}\n"
                    f"SL: {trade['stop_loss']:.5f}\n"
                    f"TP: {trade['take_profit']:.5f}\n"
                    f"–†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: {trade['lot_size']:.2f}\n"
                    f"–û—Ç–∫—Ä—ã—Ç–∞: {trade['opened_at'].split('T')[0]}\n\n"
                )
            
            await update.message.reply_text(message, parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def demo_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É EURUSD."""
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã EURUSD –¥–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = await get_current_price()
        
        if current_price is not None:
            await update.message.reply_text(
                f"üí∞ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ EURUSD*: `{current_price:.5f}`",
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def demo_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "demo_reset_confirm":
        try:
            await query.edit_message_text("‚è≥ –°–±—Ä–æ—Å –¥–µ–º–æ-—Å—á–µ—Ç–∞...")
            result = await demo_account.reset_account()
            
            if 'error' in result:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–µ–º–æ-—Å—á–µ—Ç–∞: {result['error']}")
            else:
                await query.edit_message_text(
                    "‚úÖ –î–µ–º–æ-—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n"
                    f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result['balance']:.2f}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–µ–º–æ-—Å—á–µ—Ç–∞: {e}")
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    elif query.data == "demo_reset_cancel":
        await query.edit_message_text("‚ùå –°–±—Ä–æ—Å –¥–µ–º–æ-—Å—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
async def periodic_signal_check(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏."""
    try:
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞...")
        await check_signals_and_process()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        trades = await demo_account.get_trade_history(limit=5)
        open_trades = [t for t in trades if t.get('status') == 'OPEN']
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        # –≠—Ç—É —á–∞—Å—Ç—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def add_demo_account_handlers(application: Application) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–µ–º–æ-—Å—á–µ—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler(f"{CMD_PREFIX}start", demo_start))
    application.add_handler(CommandHandler(f"{CMD_PREFIX}help", demo_help))
    application.add_handler(CommandHandler(f"{CMD_PREFIX}balance", demo_balance))
    application.add_handler(CommandHandler(f"{CMD_PREFIX}stats", demo_stats))
    application.add_handler(CommandHandler(f"{CMD_PREFIX}trades", demo_trades))
    application.add_handler(CommandHandler(f"{CMD_PREFIX}chart", demo_chart))
    application.add_handler(CommandHandler(f"{CMD_PREFIX}reset", demo_reset))
    application.add_handler(CommandHandler(f"{CMD_PREFIX}check", demo_check))
    application.add_handler(CommandHandler(f"{CMD_PREFIX}price", demo_price))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞
    application.add_handler(CallbackQueryHandler(demo_button_callback, pattern=r"^demo_"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    application.job_queue.run_repeating(
        periodic_signal_check,
        interval=300,  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        first=10  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–µ–º–æ-—Å—á–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)
def signal_handler(sig, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é)."""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–µ–º–æ-—Å—á–µ—Ç–∞
    add_demo_account_handlers(application)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –¥–µ–º–æ-—Å—á–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
