import os
import json
import pandas as pd
import pandas_ta as ta
import joblib
from yahoofinancials import YahooFinancials
import telegram
from flask import Flask, request
from datetime import datetime, timedelta
import yfinance as yf
import requests
import threading

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
app = Flask(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è yfinance ---
yf_session = requests.Session()
yf_session.headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID') # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
MODEL_FILE = 'ml_model_final_fix.joblib'
PREDICTION_THRESHOLD = 0.55
LOOKBACK_PERIOD = 20
SUBSCRIBERS_FILE = 'subscribers.json'
HISTORY_FILE = 'signals_history.json' # –§–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤

# --- 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∏ –ò—Å—Ç–æ—Ä–∏–µ–π ---
def get_subscribers():
    """–ß–∏—Ç–∞–µ—Ç ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SUBSCRIBERS_FILE):
        return []
    with open(SUBSCRIBERS_FILE, 'r') as f:
        return json.load(f)

def add_subscriber(chat_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id not in subscribers:
        subscribers.append(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

def remove_subscriber(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

def log_signal(signal_data):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏—é."""
    history = []
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, 'r') as f:
            history = json.load(f)
    history.append(signal_data)
    with open(HISTORY_FILE, 'w') as f:
        json.dump(history, f, indent=4)

def get_stats():
    """–ß–∏—Ç–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤."""
    if not os.path.exists(HISTORY_FILE):
        return "–ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–∞."
    with open(HISTORY_FILE, 'r') as f:
        history = json.load(f)
    
    if not history:
        return "–ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–∞."

    report = "üìä **–ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤** üìä\n\n"
    for signal in history:
        report += (
            f"üîπ **–¢–∏–ø:** {signal['type']}\n"
            f"   **–î–∞—Ç–∞:** {signal['timestamp']}\n"
            f"   **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {signal['probability']:.2%}\n\n"
        )
    return report

# --- 3. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
def get_data(end_date=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é yfinance.
    """
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö yfinance. –†–µ–∂–∏–º: {'–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π' if end_date else 'Live'}")
    try:
        eurusd_ticker = yf.Ticker('EURUSD=X', session=yf_session)
        dxy_ticker = yf.Ticker('DX-Y.NYB', session=yf_session)

        if end_date:
            end_dt = datetime.strptime(end_date, '%Y-%m-%d')
            start_dt = end_dt - timedelta(days=10)
            end_dt_inclusive = end_dt + timedelta(days=1)
            eurusd_data = eurusd_ticker.history(start=start_dt, end=end_dt_inclusive, interval='30m')
            dxy_data = dxy_ticker.history(start=start_dt, end=end_dt_inclusive, interval='30m')
        else:
            eurusd_data = eurusd_ticker.history(period='5d', interval='30m')
            dxy_data = dxy_ticker.history(period='5d', interval='30m')

        if eurusd_data.empty or dxy_data.empty:
            print("–î–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∞–∫—Ç–∏–≤–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return None

        eurusd_data.reset_index(inplace=True)
        dxy_data.reset_index(inplace=True)
        
        date_col = next(col for col in eurusd_data.columns if 'date' in col.lower())
        eurusd_data.rename(columns={date_col: 'Datetime'}, inplace=True)
        date_col = next(col for col in dxy_data.columns if 'date' in col.lower())
        dxy_data.rename(columns={date_col: 'Datetime'}, inplace=True)
        
        eurusd_data.ta.rsi(length=14, append=True)
        eurusd_data.ta.macd(fast=12, slow=26, signal=9, append=True)
        eurusd_data.ta.atr(length=14, append=True)
        eurusd_data.rename(columns={'RSI_14':'RSI', 'MACD_12_26_9':'MACD', 'MACDh_12_26_9':'MACD_hist', 'MACDs_12_26_9':'MACD_signal', 'ATRr_14':'ATR'}, inplace=True)
        
        eurusd_data.set_index('Datetime', inplace=True)
        dxy_data.set_index('Datetime', inplace=True)
        
        dxy_data_renamed = dxy_data.rename(columns={'Low': 'DXY_Low'})
        data = pd.concat([eurusd_data, dxy_data_renamed['DXY_Low']], axis=1)
        
        data.dropna(inplace=True)
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ yfinance.")
        return data

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_data: {e}")
        return None

def check_for_signal(end_date=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª. –í—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ ML-–º–æ–¥–µ–ª–∏.
    """
    data = get_data(end_date)
    if data is None or data.empty:
        return "–†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", None

    candles_to_check = data.iloc[-1:] if end_date is None else data[data.index.strftime('%Y-%m-%d') == end_date]

    if candles_to_check.empty:
         return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ {end_date}.", None

    for i in range(len(candles_to_check)):
        last_candle = candles_to_check.iloc[i]
        
        try:
            candle_position = data.index.get_loc(last_candle.name)
            if candle_position < LOOKBACK_PERIOD: continue
            lookback_data = data.iloc[candle_position - LOOKBACK_PERIOD : candle_position]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–µ–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–µ—á–∏ {last_candle.name}: {e}")
            continue

        eurusd_judas_swing = last_candle['High'] > lookback_data['High'].max()
        dxy_raid = last_candle['DXY_Low'] < lookback_data['DXY_Low'].min()

        if eurusd_judas_swing and dxy_raid:
            win_prob = 0.99 
            
            signal_msg = (
                f"üö® –¢–ï–°–¢–û–í–´–ô –°–ò–ì–ù–ê–õ (SELL) EUR/USD üö®\n\n"
                f"–ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω, –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
                f"–í—Ä–µ–º—è —Å–µ—Ç–∞–ø–∞ (UTC): `{last_candle.name.strftime('%Y-%m-%d %H:%M:%S')}`"
            )
            signal_log_data = {
                "type": "Backtest-Pattern" if end_date else "Live-Pattern",
                "timestamp": last_candle.name.strftime('%Y-%m-%d %H:%M:%S'),
                "probability": win_prob
            }
            return signal_msg, signal_log_data
                
    return "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç.", None

# --- 4. –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –†–æ—É—Ç—ã ---
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram."""
    update = telegram.Update.de_json(request.get_json(force=True), bot)
    if not update.message: return 'ok' # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    chat_id = update.message.chat.id
    text = update.message.text.strip()
    command_parts = text.split()
    command = command_parts[0]

    if command == '/start':
        bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n- /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏\n- /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏\n- /test –ì–ì–ì–ì-–ú–ú-–î–î –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –¥–∞—Ç–µ\n- /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏")
    elif command == '/subscribe':
        if add_subscriber(chat_id):
            bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
        else:
            bot.send_message(chat_id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    elif command == '/unsubscribe':
        if remove_subscriber(chat_id):
            bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
        else:
            bot.send_message(chat_id, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    elif command == '/stats':
        stats_report = get_stats()
        bot.send_message(chat_id, stats_report, parse_mode='Markdown')
    elif command == '/test':
        if len(command_parts) < 2:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /test –ì–ì–ì–ì-–ú–ú-–î–î")
            return 'ok'

        def run_test_in_background(chat_id, date_to_test):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
            print(f"–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {date_to_test}")
            message, log_data = check_for_signal(end_date=date_to_test)
            
            if log_data:
                log_signal(log_data)

            bot.send_message(chat_id, message, parse_mode='Markdown')
            print(f"–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {date_to_test}")

        try:
            date_to_test = command_parts[1]
            datetime.strptime(date_to_test, '%Y-%m-%d') # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=run_test_in_background, args=(chat_id, date_to_test))
            thread.start()
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            bot.send_message(chat_id, f"–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞ {date_to_test} –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test –ì–ì–ì–ì-–ú–ú-–î–î")
        except Exception as e:
            bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    return 'ok'

@app.route('/check', methods=['GET'])
def check_route():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è UptimeRobot)."""
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /check –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
    message, log_data = check_for_signal()
    
    if log_data: # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        print(f"–ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª, —Ä–∞—Å—Å—ã–ª–∞—é –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...")
        log_signal(log_data) # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        subscribers = get_subscribers()
        for sub_id in subscribers:
            try:
                bot.send_message(sub_id, message, parse_mode='Markdown')
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {sub_id}: {e}")
    else:
        print(message) # –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ "–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤" –∏–ª–∏ "–†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç"
        
    return message

@app.route('/')
def index():
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤."""
    return "Telegram Bot is running!"

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000))) 
