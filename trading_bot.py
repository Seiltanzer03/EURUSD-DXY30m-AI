import os
import json
import pandas as pd
import pandas_ta as ta
import joblib
import yfinance as yf
import telegram
from flask import Flask, request
import asyncio
from trading_strategy import run_backtest, run_backtest_local, run_backtest_m5
import threading
import logging
import re
from signal_core import generate_signal_and_plot, generate_signal_and_plot_30m, load_data, create_signal_plot
from telegram import Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è "–ª–µ–Ω–∏–≤–æ–π" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
_background_loop = None
_loop_thread = None
_thread_lock = threading.Lock()

def get_background_loop():
    """–õ–µ–Ω–∏–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç event loop –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
    global _background_loop, _loop_thread
    with _thread_lock:
        if _loop_thread is None:
            logging.info("Initializing background loop and thread for the first time in this worker...")
            _background_loop = asyncio.new_event_loop()
            
            def start_loop(loop):
                asyncio.set_event_loop(loop)
                logging.info("Initializing PTB application in background thread...")
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ —Ç–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç application.bot
                loop.run_until_complete(application.initialize())
                logging.info("PTB application initialized.")
                loop.run_forever()

            _loop_thread = threading.Thread(target=start_loop, args=(_background_loop,), daemon=True)
            _loop_thread.start()
            logging.info("Background loop and thread have been started.")
    return _background_loop

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –∏—Ö –Ω–µ —É–¥–∞–ª–∏–ª —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
background_tasks = set()

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ï–ì–û —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞. –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞.
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
bot = application.bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
SUBSCRIBERS_FILE = 'subscribers.json'

# --- 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ ---
def get_subscribers():
    """–ß–∏—Ç–∞–µ—Ç ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SUBSCRIBERS_FILE):
        return []
    with open(SUBSCRIBERS_FILE, 'r') as f:
        return json.load(f)

def add_subscriber(chat_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id not in subscribers:
        subscribers.append(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

def remove_subscriber(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

# --- 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_stats_for_telegram(stats):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ backtesting.py –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
    if isinstance(stats, str): # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return f"`{stats}`"

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Series –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    stats_dict = stats.to_dict()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    start_date = stats_dict.get('Start')
    end_date = stats_dict.get('End')
    duration = stats_dict.get('Duration')
    equity_final = stats_dict.get('Equity Final [$]')
    equity_peak = stats_dict.get('Equity Peak [$]')
    return_pct = stats_dict.get('Return [%]')
    buy_hold_return_pct = stats_dict.get('Buy & Hold Return [%]')
    max_drawdown_pct = stats_dict.get('Max. Drawdown [%]')
    win_rate_pct = stats_dict.get('Win Rate [%]')
    profit_factor = stats_dict.get('Profit Factor')
    trades = stats_dict.get('# Trades')

    return (
        f"*–ü–µ—Ä–∏–æ–¥:* `{start_date} - {end_date}`\n"
        f"*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* `{duration}`\n\n"
        f"*–ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:* `${equity_final:,.2f}`\n"
        f"*–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:* `{return_pct:.2f}%`\n"
        f"*Max –ø—Ä–æ—Å–∞–¥–∫–∞:* `{max_drawdown_pct:.2f}%`\n\n"
        f"*–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* `{int(trades)}`\n"
        f"*–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* `{win_rate_pct:.2f}%`\n"
        f"*Profit Factor:* `{profit_factor:.2f}`\n"
        f"*–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å Buy & Hold:* `{buy_hold_return_pct:.2f}%`"
    )

# --- 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º M5 (SMC) –∏ M30 (SMC+AI).\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
        "/backtest - –ë—ç–∫—Ç–µ—Å—Ç M30 –Ω–∞ –¥–∞–Ω–Ω—ã—Ö Yahoo\n"
        "/backtest_local 0.55 - –õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç M30\n"
        "/fullbacktest - –ü–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞\n"
        "/backtest_m5 - –ë—ç–∫—Ç–µ—Å—Ç M5 –Ω–∞ –¥–∞–Ω–Ω—ã—Ö Yahoo –∑–∞ 30 –¥–Ω–µ–π"
    )

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."""
    if add_subscriber(update.message.chat_id):
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if remove_subscriber(update.message.chat_id):
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ M5 –∏ M30...")
    loop = get_background_loop()
    task = asyncio.run_coroutine_threadsafe(check_and_send_signals_to_chat(update.message.chat_id), loop)
    background_tasks.add(task)
    task.add_done_callback(background_tasks.discard)

async def backtest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç M30, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-–æ—Ç—á–µ—Ç –∏ PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –í–°–ï–• —Å–¥–µ–ª–æ–∫."""
    chat_id = update.message.chat_id
    threshold = 0.55  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    await bot.send_message(chat_id, f'‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –±—ç–∫—Ç–µ—Å—Ç M30 —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ Yahoo (–ø–æ—Ä–æ–≥ {threshold}). –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫...')
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        stats, data, plot_filename = await asyncio.to_thread(run_backtest, threshold)
        
        # –ï—Å–ª–∏ stats - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∑–Ω–∞—á–∏—Ç, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –±—ç–∫—Ç–µ—Å—Ç–∞
        if isinstance(stats, str):
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
            return

        # --- 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫ ---
        trades = stats['_trades']
        if not trades.empty:
            await bot.send_message(chat_id, f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–∞—á–∫–∞–º–∏ –ø–æ 10 —à—Ç.)...")

            image_paths_to_delete = []
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 10
            for i in range(0, len(trades), 10):
                chunk = trades.iloc[i:i+10]
                media_group = []
                opened_files = []
                
                for j, trade in chunk.iterrows():
                    try:
                        entry_time = trade['EntryTime']
                        exit_time = trade['ExitTime']
                        
                        start_idx = data.index.get_loc(entry_time)
                        end_idx = data.index.get_loc(exit_time)
                        
                        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        plot_data = data.iloc[max(0, start_idx - 50) : end_idx + 20]
                        
                        plot_title = f"M30 Trade at {entry_time.strftime('%Y-%m-%d %H:%M')}"
                        img_filename = f"m30_trade_{chat_id}_{i+j}.png"

                        await asyncio.to_thread(
                            create_signal_plot, 
                            plot_data, entry_time, trade['EntryPrice'], trade['SlPrice'], trade['TpPrice'], plot_title, img_filename
                        )
                        
                        if os.path.exists(img_filename):
                            image_paths_to_delete.append(img_filename)
                            f = open(img_filename, 'rb')
                            opened_files.append(f)
                            caption = f"–°–¥–µ–ª–∫–∏ {i+1}-{min(i+10, len(trades))} –∏–∑ {len(trades)}" if j == chunk.index[0] else None
                            media_group.append(InputMediaPhoto(media=f, caption=caption))

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è M30 —Å–¥–µ–ª–∫–∏: {e}", exc_info=True)

                if media_group:
                    await bot.send_media_group(chat_id, media=media_group)
                
                for f in opened_files:
                    f.close()

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for path in image_paths_to_delete:
                if os.path.exists(path):
                    os.remove(path)
        else:
            await bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


        # --- 2. –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-–æ—Ç—á–µ—Ç–∞ ---
        if plot_filename and os.path.exists(plot_filename):
            await update.message.reply_document(
                document=open(plot_filename, 'rb'),
                caption=f"üìà *–ò—Ç–æ–≥–æ–≤—ã–π PDF-–æ—Ç—á–µ—Ç –ø–æ –±—ç–∫—Ç–µ—Å—Ç—É M30 (Yahoo)*\n\n{format_stats_for_telegram(stats)}",
                parse_mode='Markdown'
            )
            os.remove(plot_filename)
        else:
            # –ï—Å–ª–∏ plot_filename –Ω–µ –ø—Ä–∏—à–µ–ª, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –Ω–æ stats –µ—Å—Ç—å
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á–µ—Ç. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{format_stats_for_telegram(stats)}", parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /backtest: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

async def backtest_local(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ."""
    try:
        threshold_str = context.args[0]
        threshold = float(threshold_str)
        if not (0 <= threshold <= 1):
            raise ValueError("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1.")
    except (IndexError, ValueError):
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /backtest_local 0.55')
        return

    chat_id = update.message.chat.id
    
    loop = get_background_loop()
    task = asyncio.run_coroutine_threadsafe(run_backtest_local_async(chat_id, threshold), loop)
    background_tasks.add(task)
    task.add_done_callback(background_tasks.discard)

async def run_backtest_local_async(chat_id, threshold):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç."""
    eurusd_file = 'EURUSD_Candlestick_30_m_BID_18.06.2022-18.06.2025 (2).csv'
    dxy_file = 'DOLLAR.IDXUSD_Candlestick_30_m_BID_18.06.2022-18.06.2025 (2).csv'
    
    logging.info(f"–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {chat_id} —Å –ø–æ—Ä–æ–≥–æ–º {threshold}.")
    await bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—É—Å–∫–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    try:
        if not os.path.exists(eurusd_file) or not os.path.exists(dxy_file):
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ `{eurusd_file}` –∏ `{dxy_file}` –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
            return

        stats, data, plot_file = await asyncio.to_thread(
            run_backtest_local, 
            eurusd_file, 
            dxy_file,
            threshold
        )
        
        if plot_file and os.path.exists(plot_file):
            stats_text = format_stats_for_telegram(stats)
            await bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:\n\n{stats_text}", parse_mode='Markdown')
            
            with open(plot_file, 'rb') as f:
                await bot.send_document(chat_id, document=f, caption=f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –±—ç–∫—Ç–µ—Å—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}")
            os.remove(plot_file)
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        await bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def fullbacktest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö."""
    chat_id = update.message.chat_id
    loop = get_background_loop()
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
    task = asyncio.run_coroutine_threadsafe(run_backtest_local_async(chat_id, 0.55), loop)
    background_tasks.add(task)
    task.add_done_callback(background_tasks.discard)

async def send_signal_to_chat(chat_id, signal_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Å—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    signal, entry, sl, tp, last_bar, image_path, timeframe = signal_data

    if not signal:
        return

    message = (
        f"üö® –°–ò–ì–ù–ê–õ ({timeframe}) üö®\n"
        f"üîî **Short EURUSD**\n"
        f"üîµ **–í—Ö–æ–¥:** `{entry:.5f}`\n"
        f"üî¥ **Stop-Loss:** `{sl:.5f}`\n"
        f"üü¢ **Take-Profit:** `{tp:.5f}`\n"
        f"üïó **–í—Ä–µ–º—è —Å–µ—Ç–∞–ø–∞:** `{last_bar.name.strftime('%Y-%m-%d %H:%M:%S UTC')}`"
    )
    
    try:
        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as img:
                await bot.send_photo(chat_id, photo=img, caption=message, parse_mode='Markdown')
            os.remove(image_path) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        else:
            await bot.send_message(chat_id, message, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ —á–∞—Ç {chat_id}: {e}")

async def check_and_send_signals_to_chat(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–∞ –¢–§ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    try:
        await bot.send_message(chat_id, "–ü—Ä–æ–≤–µ—Ä—è—é M5...")
        signal_data_5m = generate_signal_and_plot()
        if signal_data_5m[0]: 
            await send_signal_to_chat(chat_id, signal_data_5m)
        else:
            await bot.send_message(chat_id, "–ù–∞ M5 —Å–µ—Ç–∞–ø–∞ –Ω–µ—Ç.")

        await bot.send_message(chat_id, "–ü—Ä–æ–≤–µ—Ä—è—é M30...")
        signal_data_30m = generate_signal_and_plot_30m()
        if signal_data_30m[0]:
            await send_signal_to_chat(chat_id, signal_data_30m)
        else:
            await bot.send_message(chat_id, "–ù–∞ M30 —Å–µ—Ç–∞–ø–∞ –Ω–µ—Ç.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def backtest_m5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç M5, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-–æ—Ç—á–µ—Ç –∏ PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ü–û–°–õ–ï–î–ù–ò–• 5 —Å–¥–µ–ª–æ–∫."""
    chat_id = update.message.chat_id
    await bot.send_message(chat_id, '‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –±—ç–∫—Ç–µ—Å—Ç M5 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫...')

    try:
        stats, data, plot_filename = await asyncio.to_thread(run_backtest_m5)

        if isinstance(stats, str):
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ M5 –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
            return

        trades = stats['_trades']
        if not trades.empty:
            last_trades = trades.tail(5)
            await bot.send_message(chat_id, f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(last_trades)}...")

            media_group, opened_files, image_paths_to_delete = [], [], []

            for i, trade in last_trades.iterrows():
                try:
                    entry_time, exit_time = trade['EntryTime'], trade['ExitTime']
                    start_idx = data.index.get_loc(entry_time)
                    end_idx = data.index.get_loc(exit_time)
                    
                    plot_data = data.iloc[max(0, start_idx - 50) : end_idx + 20]
                    plot_title = f"M5 Trade at {entry_time.strftime('%Y-%m-%d %H:%M')}"
                    img_filename = f"m5_trade_{chat_id}_{i}.png"

                    await asyncio.to_thread(
                        create_signal_plot, 
                        plot_data, entry_time, trade['EntryPrice'], trade['SlPrice'], trade['TpPrice'], plot_title, img_filename
                    )
                    
                    if os.path.exists(img_filename):
                        image_paths_to_delete.append(img_filename)
                        f = open(img_filename, 'rb')
                        opened_files.append(f)
                        caption = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(last_trades)} —Å–¥–µ–ª–æ–∫ –∏–∑ {len(trades)}" if i == last_trades.index[0] else None
                        media_group.append(InputMediaPhoto(media=f, caption=caption))

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è M5 —Å–¥–µ–ª–∫–∏: {e}", exc_info=True)

            if media_group:
                await bot.send_media_group(chat_id, media=media_group)
            
            for f in opened_files:
                f.close()
            for path in image_paths_to_delete:
                if os.path.exists(path):
                    os.remove(path)
        else:
            await bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

        if plot_filename and os.path.exists(plot_filename):
            await update.message.reply_document(
                document=open(plot_filename, 'rb'),
                caption=f"üìà *–ò—Ç–æ–≥–æ–≤—ã–π PDF-–æ—Ç—á–µ—Ç –ø–æ –±—ç–∫—Ç–µ—Å—Ç—É M5*\n\n{format_stats_for_telegram(stats)}",
                parse_mode='Markdown'
            )
            os.remove(plot_filename)
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á–µ—Ç. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{format_stats_for_telegram(stats)}", parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /backtest_m5: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞ M5: {e}")

# --- 5. –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –†–æ—É—Ç—ã ---

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram, –∏—Å–ø–æ–ª—å–∑—É—è PTB Application."""
    try:
        update_data = request.get_json(force=True)
        logging.info(f"Webhook received: {update_data}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º application.bot, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ update –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        update = telegram.Update.de_json(update_data, application.bot)
        
        loop = get_background_loop()
        asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
        logging.info("application.process_update task scheduled successfully.")
        
    except Exception as e:
        logging.error("An error occurred in the webhook handler.", exc_info=True)
    
    return 'ok'

@app.route('/check', methods=['GET'])
def check_route():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (UptimeRobot)."""
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /check –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
    try:
        loop = get_background_loop()
        task = asyncio.run_coroutine_threadsafe(check_and_send_to_subscribers(), loop)
        background_tasks.add(task)
        task.add_done_callback(background_tasks.discard)
        return "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞.", 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /check: {e}")
        return f"–û—à–∏–±–∫–∞: {e}", 500

async def check_and_send_to_subscribers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–∞ –¢–§ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."""
    subscribers = get_subscribers()
    if not subscribers:
        logging.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    logging.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    
    try:
        signal_data_5m = generate_signal_and_plot()
        signal_data_30m = generate_signal_and_plot_30m()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return

    for sub_id in subscribers:
        if signal_data_5m and signal_data_5m[0]:
            await send_signal_to_chat(sub_id, signal_data_5m)
        if signal_data_30m and signal_data_30m[0]:
            await send_signal_to_chat(sub_id, signal_data_30m)
            
    logging.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@app.route('/')
def index():
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤."""
    return "Telegram Bot is running!"

# --- 6. –ó–∞–ø—É—Å–∫ ---

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("subscribe", subscribe))
application.add_handler(CommandHandler("unsubscribe", unsubscribe))
application.add_handler(CommandHandler("check", check))
application.add_handler(CommandHandler("backtest", backtest))
application.add_handler(CommandHandler("backtest_local", backtest_local))
application.add_handler(CommandHandler("fullbacktest", fullbacktest))
application.add_handler(CommandHandler("backtest_m5", backtest_m5))
