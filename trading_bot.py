import pandas as pd
import pandas_ta as ta
import joblib
import yfinance as yf
import schedule
import time
import telegram
import warnings
import asyncio
import os # <-- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –í–ê–ñ–ù–û: –°–µ–∫—Ä–µ—Ç—ã —Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∞ –Ω–µ –∏–∑ –∫–æ–¥–∞
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MODEL_FILE = 'ml_model_final_fix.joblib'
# ML_MODEL = joblib.load(MODEL_FILE) # –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ –æ—Ç—Å—é–¥–∞
PREDICTION_THRESHOLD = 0.55
LOOKBACK_PERIOD = 20

# –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings("ignore", category=FutureWarning)


# --- 2. –§—É–Ω–∫—Ü–∏–∏ ---

async def send_telegram_message(bot, chat_id, text):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        bot.send_message(chat_id=chat_id, text=text, parse_mode='Markdown')
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def get_live_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è EUR/USD –∏ DXY."""
    print("\n–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        eurusd_data = yf.download(tickers='EURUSD=X', period='5d', interval='30m')
        dxy_data = yf.download(tickers='DX-Y.NYB', period='5d', interval='30m')

        if eurusd_data.empty or dxy_data.empty:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä—ã –∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            return None

        # --- –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ ---
        eurusd_data.reset_index(inplace=True)
        dxy_data.reset_index(inplace=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–æ–π (–º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è 'Datetime', 'Date' –∏–ª–∏ 'index')
        date_col_eur = next((col for col in ['Datetime', 'Date', 'index'] if col in eurusd_data.columns), None)
        date_col_dxy = next((col for col in ['Datetime', 'Date', 'index'] if col in dxy_data.columns), None)

        if not date_col_eur or not date_col_dxy:
            print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π –≤ –¥–∞–Ω–Ω—ã—Ö yfinance.")
            return None

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ 'Datetime' –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        eurusd_data.rename(columns={date_col_eur: 'Datetime'}, inplace=True)
        dxy_data.rename(columns={date_col_dxy: 'Datetime'}, inplace=True)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è, –ø–æ–∫–∞ 'Datetime' —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π
        eurusd_data.ta.rsi(length=14, append=True)
        eurusd_data.ta.macd(fast=12, slow=26, signal=9, append=True)
        eurusd_data.ta.atr(length=14, append=True)
        eurusd_data.rename(columns={'RSI_14':'RSI', 'MACD_12_26_9':'MACD', 'MACDh_12_26_9':'MACD_hist', 'MACDs_12_26_9':'MACD_signal', 'ATRr_14':'ATR'}, inplace=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 'Datetime' –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        eurusd_data.set_index('Datetime', inplace=True)
        dxy_data.set_index('Datetime', inplace=True)
        
        dxy_data_renamed = dxy_data.rename(columns={'Low': 'DXY_Low'})
        
        data = pd.concat([eurusd_data, dxy_data_renamed['DXY_Low']], axis=1)
        data.dropna(inplace=True)
        
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        return data
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

async def check_for_signal(bot):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω–∞ –Ω—É–∂–Ω–∞
    try:
        ml_model = joblib.load(MODEL_FILE)
    except FileNotFoundError:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª –º–æ–¥–µ–ª–∏ {MODEL_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! !!!")
        await send_telegram_message(bot, TELEGRAM_CHAT_ID, f"‚ùå *–û–®–ò–ë–ö–ê: –§–∞–π–ª –º–æ–¥–µ–ª–∏ `{MODEL_FILE}` –Ω–µ –Ω–∞–π–¥–µ–Ω!* –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        return

    print("--- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ ---")
    data = get_live_data()
    if data is None:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ "—Å—Ç–∞—Ä—ã–µ" –ª–∏ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–∑–Ω–∞–∫ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è)
    last_candle_time = data.index[-1].tz_convert('UTC')
    time_now = pd.Timestamp.now(tz='UTC')
    time_diff = time_now - last_candle_time
    
    if time_diff.total_seconds() > 3600 * 4: # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 4 —á–∞—Å–æ–≤
        print(f"–î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {last_candle_time}). –í–µ—Ä–æ—è—Ç–Ω–æ, —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –ó–ê–í–ï–†–®–ï–ù–ù–£–Æ —Å–≤–µ—á—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    last_candle = data.iloc[-2]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC)
    current_hour = last_candle.name.hour
    if not (13 <= current_hour <= 17):
        print(f"–í–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–µ–∫—É—â–∏–π —á–∞—Å UTC: {current_hour}). –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    print("–í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–æ–µ, –Ω–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–∞–ø–∞...")
    # –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–∞–ø–∞
    start_index = len(data) - LOOKBACK_PERIOD - 2
    end_index = len(data) - 2
    
    recent_eurusd_high = data['High'].iloc[start_index:end_index].max()
    eurusd_judas_swing = last_candle['High'] > recent_eurusd_high

    recent_dxy_low = data['DXY_Low'].iloc[start_index:end_index].min()
    dxy_raid = last_candle['DXY_Low'] < recent_dxy_low

    if eurusd_judas_swing and dxy_raid:
        print("!!! –ù–ê–ô–î–ï–ù –°–ï–¢–ê–ü !!! –ü—Ä–æ–≤–µ—Ä—è—é —Å –ø–æ–º–æ—â—å—é –ò–ò...")
        
        features = [
            last_candle['RSI'],
            last_candle['MACD'],
            last_candle['MACD_hist'],
            last_candle['MACD_signal'],
            last_candle['ATR']
        ]
        
        win_probability = ml_model.predict_proba([features])[0][1]
        
        print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –ø–æ –º–Ω–µ–Ω–∏—é –ò–ò: {win_probability:.2%}")
        
        if win_probability >= PREDICTION_THRESHOLD:
            message = (
                f"üö® *–°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£ (SELL) EUR/USD* üö®\n\n"
                f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: *{win_probability:.2%}*\n"
                f"–í—Ä–µ–º—è —Å–µ—Ç–∞–ø–∞ (UTC): `{last_candle.name}`\n\n"
                f"–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤—Ö–æ–¥—É –ø–æ —Ä—ã–Ω–∫—É –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏.\n\n"
                f"*–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:*\n"
                f"- RSI: `{features[0]:.2f}`\n"
                f"- MACD: `{features[1]:.2f}`\n"
                f"- ATR: `{features[4]:.4f}`"
            )
            await send_telegram_message(bot, TELEGRAM_CHAT_ID, message)
        else:
            print("–ò–ò –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª —Å–∏–≥–Ω–∞–ª. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è.")
    else:
        print("–°–µ—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–¥—É —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID.")
        print("!!! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Render).")
        return

    bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    await send_telegram_message(bot, TELEGRAM_CHAT_ID, "‚úÖ *–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç-—Å–∏–≥–Ω–∞–ª—å—â–∏–∫ –∑–∞–ø—É—â–µ–Ω* ‚úÖ\n\n–û–∂–∏–¥–∞—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é (13:00 - 17:00 UTC)...")

    # --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
    # –ú—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ 2-–π –∏ 32-–π –º–∏–Ω—É—Ç–µ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞,
    # —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —É—Å–ø–µ—Ç—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫—Ä—ã—Ç–æ–π 00-–π –∏–ª–∏ 30-–π —Å–≤–µ—á–µ.
    schedule.every().hour.at(":02").do(lambda: asyncio.create_task(check_for_signal(bot)))
    schedule.every().hour.at(":32").do(lambda: asyncio.create_task(check_for_signal(bot)))

    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        async def notify_shutdown():
            bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
            await send_telegram_message(bot, TELEGRAM_CHAT_ID, f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*\n\n`{e}`")
        asyncio.run(notify_shutdown()) 