import os
import json
import pandas as pd
import pandas_ta as ta
import joblib
import yfinance as yf
import telegram
from flask import Flask, request, abort, Response
import asyncio
from trading_strategy import run_backtest, run_full_backtest, run_backtest_m5
import threading
import logging
import subprocess
import re
from signal_core import generate_signal_and_plot, generate_signal_and_plot_30m
import uuid
import requests
import time

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è "–ª–µ–Ω–∏–≤–æ–π" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
# –û–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ Gunicorn.
_background_loop = None
_loop_thread = None
_thread_lock = threading.Lock()

def get_background_loop():
    """–õ–µ–Ω–∏–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç event loop –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
    global _background_loop, _loop_thread
    with _thread_lock:
        if _loop_thread is None:
            logging.info("Initializing background loop and thread for the first time in this worker...")
            _background_loop = asyncio.new_event_loop()
            
            def start_loop(loop):
                asyncio.set_event_loop(loop)
                loop.run_forever()

            _loop_thread = threading.Thread(target=start_loop, args=(_background_loop,), daemon=True)
            _loop_thread.start()
            logging.info("Background loop and thread have been started.")
    return _background_loop

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –∏—Ö –Ω–µ —É–¥–∞–ª–∏–ª —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
background_tasks = set()

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID') # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
MODEL_FILE = 'ml_model_final_fix.joblib'
PREDICTION_THRESHOLD = 0.55 # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è live-—Å–∏–≥–Ω–∞–ª–æ–≤
LOOKBACK_PERIOD = 20
SUBSCRIBERS_FILE = 'subscribers.json'

# --- Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è HTML-–æ—Ç—á—ë—Ç–æ–≤ (Telegram Game) ---
app_reports = Flask('reports')
reports = {}  # {token: (html, expire_time)}

def cleanup_reports():
    while True:
        now = time.time()
        to_delete = [token for token, (_, exp) in reports.items() if exp < now]
        for token in to_delete:
            del reports[token]
        time.sleep(60)

@app_reports.route('/game_report')
def game_report():
    token = request.args.get('start') or request.args.get('token')
    if not token or token not in reports:
        return abort(404, 'Report not found')
    html, _ = reports[token]
    return Response(html, mimetype='text/html')

def start_reports_server():
    threading.Thread(target=lambda: app_reports.run(host='0.0.0.0', port=8080), daemon=True).start()
    threading.Thread(target=cleanup_reports, daemon=True).start()

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
start_reports_server()

# --- 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ ---
def get_subscribers():
    """–ß–∏—Ç–∞–µ—Ç ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SUBSCRIBERS_FILE):
        return []
    with open(SUBSCRIBERS_FILE, 'r') as f:
        return json.load(f)

def add_subscriber(chat_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id not in subscribers:
        subscribers.append(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

def remove_subscriber(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

# --- 3. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
def get_live_data():
    """'–ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–∞—è' –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        eurusd_data = yf.download(tickers='EURUSD=X', period='5d', interval='30m')
        if isinstance(eurusd_data.columns, pd.MultiIndex):
            eurusd_data.columns = eurusd_data.columns.get_level_values(0)

        if eurusd_data.empty:
            print("–†—ã–Ω–æ–∫ EUR/USD –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None
            
        dxy_data = yf.download(tickers='DX-Y.NYB', period='5d', interval='30m')
        if isinstance(dxy_data.columns, pd.MultiIndex):
            dxy_data.columns = dxy_data.columns.get_level_values(0)

        if dxy_data.empty:
            print("–†—ã–Ω–æ–∫ DXY –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None

        eurusd_data.reset_index(inplace=True)
        dxy_data.reset_index(inplace=True)

        date_col = next(col for col in ['Datetime', 'Date', 'index'] if col in eurusd_data.columns)
        eurusd_data.rename(columns={date_col: 'Datetime'}, inplace=True)
        date_col = next(col for col in ['Datetime', 'Date', 'index'] if col in dxy_data.columns)
        dxy_data.rename(columns={date_col: 'Datetime'}, inplace=True)
        
        eurusd_data.ta.rsi(length=14, append=True)
        eurusd_data.ta.macd(fast=12, slow=26, signal=9, append=True)
        eurusd_data.ta.atr(length=14, append=True)
        eurusd_data.rename(columns={'RSI_14':'RSI', 'MACD_12_26_9':'MACD', 'MACDh_12_26_9':'MACD_hist', 'MACDs_12_26_9':'MACD_signal', 'ATRr_14':'ATR'}, inplace=True)
        
        eurusd_data.set_index('Datetime', inplace=True)
        dxy_data.set_index('Datetime', inplace=True)
        
        dxy_data_renamed = dxy_data.rename(columns={'Low': 'DXY_Low'})
        data = pd.concat([eurusd_data, dxy_data_renamed['DXY_Low']], axis=1)
        data.dropna(inplace=True)
        
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        return data
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_for_signal():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None."""
    try:
        ml_model = joblib.load(MODEL_FILE)
    except FileNotFoundError:
        return f"–û–®–ò–ë–ö–ê: –§–∞–π–ª –º–æ–¥–µ–ª–∏ {MODEL_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!"

    data = get_live_data()
    if data is None: return "–†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."

    last_candle_time = data.index[-1].tz_convert('UTC')
    if (pd.Timestamp.now(tz='UTC') - last_candle_time).total_seconds() > 3600 * 4:
        return f"–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {last_candle_time}), —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç."

    last_candle = data.iloc[-2]
    current_hour = last_candle.name.hour

    if not (13 <= current_hour <= 17):
        return f"–í–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å UTC: {current_hour})."
    
    start_index = len(data) - LOOKBACK_PERIOD - 2
    end_index = len(data) - 2
    
    eurusd_judas_swing = last_candle['High'] > data['High'].iloc[start_index:end_index].max()
    dxy_raid = last_candle['DXY_Low'] < data['DXY_Low'].iloc[start_index:end_index].min()

    if eurusd_judas_swing and dxy_raid:
        features = [last_candle[col] for col in ['RSI', 'MACD', 'MACD_hist', 'MACD_signal', 'ATR']]
        win_prob = ml_model.predict_proba([features])[0][1]
        
        if win_prob >= PREDICTION_THRESHOLD:
            return (
                f"üö® –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£ (SELL) EUR/USD üö®\n\n"
                f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: *{win_prob:.2%}*\n"
                f"–í—Ä–µ–º—è —Å–µ—Ç–∞–ø–∞ (UTC): `{last_candle.name}`"
            )
    return "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç."

async def run_backtest_async(chat_id, threshold):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞."""
    logging.info(f"Executing run_backtest_async for chat_id {chat_id} with threshold {threshold}.")
    try:
        await bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—É—Å–∫–∞—é –±—ç–∫—Ç–µ—Å—Ç —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        stats, plot_file = await asyncio.to_thread(run_backtest, threshold)
        if plot_file:
            await bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:\n\n<pre>{stats}</pre>", parse_mode='HTML')
            with open(plot_file, 'r', encoding='utf-8') as f:
                html = f.read()
            token = str(uuid.uuid4())
            expire_time = time.time() + 1800
            reports[token] = (html, expire_time)
            await bot.send_game(chat_id, game_short_name='backtest_report', start_parameter=token)
            os.remove(plot_file)
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

async def run_full_backtest_async(chat_id, threshold):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ –ø–æ CSV."""
    logging.info(f"Executing run_full_backtest_async for chat_id {chat_id} with threshold {threshold}.")
    try:
        await bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        stats, plot_file = await asyncio.to_thread(run_full_backtest, threshold)
        if plot_file:
            await bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞:\n\n<pre>{stats}</pre>", parse_mode='HTML')
            with open(plot_file, 'r', encoding='utf-8') as f:
                html = f.read()
            token = str(uuid.uuid4())
            expire_time = time.time() + 1800
            reports[token] = (html, expire_time)
            await bot.send_game(chat_id, game_short_name='backtest_report', start_parameter=token)
            os.remove(plot_file)
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

async def run_backtest_m5_async(chat_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    logging.info(f"Executing run_backtest_m5_async for chat_id {chat_id}.")
    try:
        await bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—É—Å–∫–∞—é –±—ç–∫—Ç–µ—Å—Ç 5-–º–∏–Ω—É—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞ 59 –¥–Ω–µ–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        stats, plot_file = await asyncio.to_thread(run_backtest_m5)
        if plot_file:
            await bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞:\n\n<pre>{stats}</pre>", parse_mode='HTML')
            with open(plot_file, 'r', encoding='utf-8') as f:
                html = f.read()
            token = str(uuid.uuid4())
            expire_time = time.time() + 1800
            reports[token] = (html, expire_time)
            await bot.send_game(chat_id, game_short_name='backtest_report', start_parameter=token)
            os.remove(plot_file)
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—É—Ç–∏ –∫ –≥—Ä–∞—Ñ–∏–∫—É
def parse_signal_output(output):
    lines = output.strip().split('\n')
    message_lines = []
    image_path = None
    for line in lines:
        if line.startswith('GRAPH_PATH:'):
            image_path = line.split(':', 1)[1].strip()
        else:
            message_lines.append(line)
    message = '\n'.join(message_lines)
    return message, image_path

async def handle_update(update):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        if not update.message or not update.message.text:
            logging.warning("Update received without a message or text, ignoring.")
            return

        chat_id = update.message.chat.id
        text = update.message.text
        logging.info(f"Received message from chat_id {chat_id}: {text}")

        if text == '/start':
            await bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SMC+AI. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.")
        elif text == '/subscribe':
            if add_subscriber(chat_id):
                await bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
            else:
                await bot.send_message(chat_id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        elif text == '/unsubscribe':
            if remove_subscriber(chat_id):
                await bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
            else:
                await bot.send_message(chat_id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        elif text == '/check':
            logging.info(f"–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /check –æ—Ç chat_id {chat_id}")
            task = asyncio.create_task(run_check_and_report(chat_id))
            background_tasks.add(task)
            task.add_done_callback(background_tasks.discard)
        elif text.startswith('/backtest_m5'):
            logging.info(f"'/backtest_m5' command recognized for chat_id {chat_id}.")
            task = asyncio.create_task(run_backtest_m5_async(chat_id))
            background_tasks.add(task)
            task.add_done_callback(background_tasks.discard)
            logging.info(f"Backtest_m5 task for chat_id {chat_id} has been created and stored.")
        elif text.startswith('/backtest'):
            logging.info(f"'/backtest' command recognized for chat_id {chat_id}.")
            try:
                threshold = 0.55
                parts = text.split()
                if len(parts) > 1:
                    threshold = float(parts[1])
                logging.info(f"Creating backtest task with threshold {threshold} for chat_id {chat_id}.")
                task = asyncio.create_task(run_backtest_async(chat_id, threshold))
                background_tasks.add(task)
                task.add_done_callback(background_tasks.discard)
                logging.info(f"Backtest task for chat_id {chat_id} has been created and stored.")
            except (ValueError, IndexError):
                logging.error("Failed to parse /backtest command.", exc_info=True)
                await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /backtest [—É—Ä–æ–≤–µ–Ω—å_—Ñ–∏–ª—å—Ç—Ä–∞], –Ω–∞–ø—Ä–∏–º–µ—Ä: /backtest 0.55")
        elif text.startswith('/fullbacktest'):
            logging.info(f"'/fullbacktest' command recognized for chat_id {chat_id}.")
            try:
                threshold = 0.55
                parts = text.split()
                if len(parts) > 1:
                    threshold = float(parts[1])
                
                task = asyncio.create_task(run_full_backtest_async(chat_id, threshold))
                background_tasks.add(task)
                task.add_done_callback(background_tasks.discard)
                logging.info(f"Full backtest task for chat_id {chat_id} has been created.")
            except (ValueError, IndexError):
                logging.error("Failed to parse /fullbacktest command.", exc_info=True)
                await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /fullbacktest [—É—Ä–æ–≤–µ–Ω—å_—Ñ–∏–ª—å—Ç—Ä–∞], –Ω–∞–ø—Ä–∏–º–µ—Ä: /fullbacktest 0.55")
        else:
            logging.info(f"Command '{text}' not recognized by any handler.")

    except Exception as e:
        logging.error(f"An error occurred in handle_update: {e}", exc_info=True)

# --- 4. –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –†–æ—É—Ç—ã ---
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤—ã–π event loop."""
    try:
        update_data = request.get_json(force=True)
        logging.info(f"Webhook received: {update_data}")
        update = telegram.Update.de_json(update_data, bot)
        
        # –ü–æ–ª—É—á–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º) —Ñ–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª
        loop = get_background_loop()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º coroutine –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ (fire-and-forget)
        asyncio.run_coroutine_threadsafe(handle_update(update), loop)
        logging.info("handle_update task scheduled successfully.")
        
    except Exception:
        logging.error("An error occurred in the webhook handler.", exc_info=True)
    
    return 'ok'

@app.route('/check', methods=['GET'])
def check_route():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, UptimeRobot), 
    —á—Ç–æ–±—ã –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
    """
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /check –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —Ä–∞—Å—Å—ã–ª–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        loop = get_background_loop()
        task = asyncio.run_coroutine_threadsafe(
            generate_and_send_signals(),
            loop
        )
        return "Check initiated", 200

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_route: {e}", exc_info=True)
        return "Error", 500

async def run_check_and_report(chat_id):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await bot.send_message(chat_id, "üîç –ù–∞—á–∏–Ω–∞—é —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –¢–§
        _, _, _, _, _, _, _, status_5m = generate_signal_and_plot()
        _, _, _, _, _, _, _, status_30m = generate_signal_and_plot_30m()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n\n"
            f"üîπ **5 –º–∏–Ω—É—Ç:** {status_5m}\n"
            f"üî∏ **30 –º–∏–Ω—É—Ç:** {status_30m}"
        )
        await bot.send_message(chat_id, report, parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)
        await bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

async def generate_and_send_signals():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç, –∏ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç, —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."""
    try:
        # 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
        signal_5m, entry_5m, sl_5m, tp_5m, last_5m, image_path_5m, timeframe_5m, _ = generate_signal_and_plot()
        
        # 30-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
        signal_30m, entry_30m, sl_30m, tp_30m, last_30m, image_path_30m, timeframe_30m, _ = generate_signal_and_plot_30m()

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if signal_5m or signal_30m:
            await send_signals(
                signal_5m, entry_5m, sl_5m, tp_5m, last_5m, image_path_5m, timeframe_5m,
                signal_30m, entry_30m, sl_30m, tp_30m, last_30m, image_path_30m, timeframe_30m
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}", exc_info=True)

async def send_signals(signal_5m, entry_5m, sl_5m, tp_5m, last_5m, image_path_5m, timeframe_5m,
                       signal_30m, entry_30m, sl_30m, tp_30m, last_30m, image_path_30m, timeframe_30m):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."""
    subscribers = get_subscribers()
    if not subscribers:
        logging.info("–°–∏–≥–Ω–∞–ª(—ã) –µ—Å—Ç—å, –Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ—Ç.")
        return

    message_parts = []
    images_to_send = []

    if signal_5m:
        message_5m = (
            f"üö® –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£ (SELL) EUR/USD ({timeframe_5m}) üö®\n\n"
            f"–í—Ä–µ–º—è —Å–µ—Ç–∞–ø–∞ (UTC): `{last_5m.name.strftime('%Y-%m-%d %H:%M')}`\n"
            f"–í—Ö–æ–¥: {entry_5m:.5f}\n"
            f"–°—Ç–æ–ø: {sl_5m:.5f}\n"
            f"–¢–µ–π–∫: {tp_5m:.5f}"
        )
        message_parts.append(message_5m)
        if image_path_5m and os.path.exists(image_path_5m):
            images_to_send.append(image_path_5m)

    if signal_30m:
        message_30m = (
            f"üö® –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£ (SELL) EUR/USD ({timeframe_30m}) üö®\n\n"
            f"–í—Ä–µ–º—è —Å–µ—Ç–∞–ø–∞ (UTC): `{last_30m.name.strftime('%Y-%m-%d %H:%M')}`\n"
            f"–í—Ö–æ–¥: {entry_30m:.5f}\n"
            f"–°—Ç–æ–ø: {sl_30m:.5f}\n"
            f"–¢–µ–π–∫: {tp_30m:.5f}"
        )
        message_parts.append(message_30m)
        if image_path_30m and os.path.exists(image_path_30m):
            images_to_send.append(image_path_30m)

    if not message_parts:
        return

    final_message = "\n\n---\n\n".join(message_parts)

    for chat_id in subscribers:
        try:
            await bot.send_message(chat_id, final_message, parse_mode='Markdown')
            for img_path in images_to_send:
                with open(img_path, 'rb') as f:
                    await bot.send_photo(chat_id, photo=f)
                os.remove(img_path) # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–¥–ø–∏—Å—á–∏–∫—É {chat_id}: {e}")

@app.route('/')
def index():
    return "Trading Bot is running."

if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –ù–∞ Render –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è gunicorn.
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000))) 
