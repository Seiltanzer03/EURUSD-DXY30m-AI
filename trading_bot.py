import os
import json
import pandas as pd
import pandas_ta as ta
import joblib
import yfinance as yf
import telegram
from flask import Flask, request
import asyncio
import io
import sys
import contextlib
from backtest import run_backtest
from alpha_vantage.foreignexchange import ForeignExchange
from alpha_vantage.timeseries import TimeSeries
import time
import numpy as np

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID') # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
ALPHA_VANTAGE_API_KEY = os.environ.get('ALPHA_VANTAGE_API_KEY') # –ö–ª—é—á –¥–ª—è Alpha Vantage
bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
MODEL_FILE = 'ml_model_final_fix.joblib'
PREDICTION_THRESHOLD = 0.55
LOOKBACK_PERIOD = 20
SUBSCRIBERS_FILE = 'subscribers.json'

# --- 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ ---
def get_subscribers():
    """–ß–∏—Ç–∞–µ—Ç ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SUBSCRIBERS_FILE):
        return []
    with open(SUBSCRIBERS_FILE, 'r') as f:
        return json.load(f)

def add_subscriber(chat_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id not in subscribers:
        subscribers.append(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

def remove_subscriber(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

# --- 3. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
def get_live_data():
    """'–ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–∞—è' –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        eurusd_data = yf.download(tickers='EURUSD=X', period='5d', interval='30m')
        if eurusd_data.empty:
            print("–†—ã–Ω–æ–∫ EUR/USD –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None
            
        dxy_data = yf.download(tickers='DX-Y.NYB', period='5d', interval='30m')
        if dxy_data.empty:
            print("–†—ã–Ω–æ–∫ DXY –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None

        eurusd_data.reset_index(inplace=True)
        dxy_data.reset_index(inplace=True)

        date_col = next(col for col in ['Datetime', 'Date', 'index'] if col in eurusd_data.columns)
        eurusd_data.rename(columns={date_col: 'Datetime'}, inplace=True)
        date_col = next(col for col in ['Datetime', 'Date', 'index'] if col in dxy_data.columns)
        dxy_data.rename(columns={date_col: 'Datetime'}, inplace=True)
        
        eurusd_data.ta.rsi(length=14, append=True)
        eurusd_data.ta.macd(fast=12, slow=26, signal=9, append=True)
        eurusd_data.ta.atr(length=14, append=True)
        eurusd_data.rename(columns={'RSI_14':'RSI', 'MACD_12_26_9':'MACD', 'MACDh_12_26_9':'MACD_hist', 'MACDs_12_26_9':'MACD_signal', 'ATRr_14':'ATR'}, inplace=True)
        
        eurusd_data.set_index('Datetime', inplace=True)
        dxy_data.set_index('Datetime', inplace=True)
        
        dxy_data_renamed = dxy_data.rename(columns={'Low': 'DXY_Low'})
        data = pd.concat([eurusd_data, dxy_data_renamed['DXY_Low']], axis=1)
        data.dropna(inplace=True)
        
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        return data
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_for_signal():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Alpha Vantage.
    """
    print("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞...")
    if not ALPHA_VANTAGE_API_KEY:
        print("–û—à–∏–±–∫–∞: API-–∫–ª—é—á –¥–ª—è Alpha Vantage –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    try:
        # --- –ó–∞–≥—Ä—É–∑–∫–∞ EUR/USD ---
        fx = ForeignExchange(key=ALPHA_VANTAGE_API_KEY, output_format='pandas')
        eurusd_data, _ = fx.get_currency_exchange_intraday('EUR', 'USD', interval='30min', outputsize='compact') # compact –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        eurusd_data.rename(columns={'1. open': 'Open', '2. high': 'High', '3. low': 'Low', '4. close': 'Close'}, inplace=True)
        eurusd_data.index = pd.to_datetime(eurusd_data.index)
        
        # –ü–∞—É–∑–∞
        time.sleep(15)

        # --- –ó–∞–≥—Ä—É–∑–∫–∞ DXY ---
        ts = TimeSeries(key=ALPHA_VANTAGE_API_KEY, output_format='pandas')
        dxy_data, _ = ts.get_intraday(symbol='DXY', interval='30min', outputsize='compact')
        dxy_data.rename(columns={'1. open': 'Open', '2. high': 'High', '3. low': 'Low', '4. close': 'Close', '5. volume': 'Volume'}, inplace=True)
        dxy_data.index = pd.to_datetime(dxy_data.index)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        data = pd.merge(eurusd_data, dxy_data, on='date', suffixes=('_eurusd', '_dxy'), how='inner')
        # ... (–¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω backtest.py, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏)

        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        data.ta.rsi(length=14, append=True, col_names=('EURUSD_RSI_14'))
        data.ta.rsi(length=14, close=data['dxy_Close'], append=True, col_names=('DXY_RSI_14'))
        data.dropna(inplace=True)

        if len(data) < LOOKBACK_PERIOD + 1:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        latest_segment = data.iloc[-(LOOKBACK_PERIOD+1):-1]
        
        input_features = np.array([
            latest_segment['EURUSD_RSI_14'].values,
            latest_segment['DXY_RSI_14'].values
        ]).flatten().reshape(1, -1)

        model = joblib.load(MODEL_FILE)
        prediction = model.predict_proba(input_features)[0][1]
        
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: {prediction:.2f}")

        if prediction > PREDICTION_THRESHOLD:
            message = f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª! üö®\n\n" \
                      f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: EUR/USD\n" \
                      f"–¢–∞–π–º—Ñ—Ä–µ–π–º: 30 –º–∏–Ω—É—Ç\n" \
                      f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫–∏: {prediction:.2%}\n\n" \
                      f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ."
            
            # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            subscribers = get_subscribers()
            for chat_id in subscribers:
                try:
                    bot.send_message(chat_id, message)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if TELEGRAM_CHAT_ID:
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ `check_for_signal`:\n\n{e}"
            bot.send_message(TELEGRAM_CHAT_ID, error_message)

# --- 4. –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –†–æ—É—Ç—ã ---
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram."""
    update = telegram.Update.de_json(request.get_json(force=True), bot)
    chat_id = update.message.chat.id
    text = update.message.text

    try:
        admin_chat_id = int(TELEGRAM_CHAT_ID)
    except (ValueError, TypeError):
        admin_chat_id = None

    if text == '/start':
        bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SMC+AI. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.")
    elif text == '/subscribe':
        if add_subscriber(chat_id):
            bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
        else:
            bot.send_message(chat_id, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    elif text == '/unsubscribe':
        if remove_subscriber(chat_id):
            bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
        else:
            bot.send_message(chat_id, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    elif text == '/runbacktest':
        if admin_chat_id and chat_id == admin_chat_id:
            bot.send_message(chat_id, "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –ó–∞–ø—É—Å–∫–∞—é –±–µ–∫—Ç–µ—Å—Ç —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            
            log_stream = io.StringIO()
            image_buffers = []
            results_log = ""
            
            try:
                # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ (print) –∏–∑ run_backtest
                with contextlib.redirect_stdout(log_stream):
                    image_buffers = run_backtest() # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É—Ñ–µ—Ä—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
                results_log = log_stream.getvalue()
            except Exception as e:
                results_log = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–µ–∫—Ç–µ—Å—Ç–∞:\\n{e}"
            
            if not results_log:
                results_log = "–ë–µ–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥
            max_length = 4000
            for i in range(0, len(results_log), max_length):
                chunk = results_log[i:i + max_length]
                bot.send_message(chat_id, f"<pre>{chunk}</pre>", parse_mode='HTML')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            if image_buffers:
                bot.send_message(chat_id, f"–û—Ç–ø—Ä–∞–≤–ª—è—é {len(image_buffers)} –≥—Ä–∞—Ñ–∏–∫–∞(–æ–≤) –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
                for img_buf in image_buffers:
                    try:
                        # –í–∞–∂–Ω–æ! –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                        img_buf.seek(0)
                        bot.send_photo(chat_id, photo=img_buf)
                    except Exception as e:
                        bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")
            elif "–°–ò–ì–ù–ê–õ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù" in results_log:
                 bot.send_message(chat_id, "–°–∏–≥–Ω–∞–ª—ã –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏.")

        else:
            bot.send_message(chat_id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            
    return 'ok'

@app.route('/check')
def scheduled_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot, –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–∞."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
    asyncio.run(asyncio.to_thread(check_for_signal))
    return "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.", 200

@app.route('/')
def index():
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤."""
    return "Telegram Bot is running!"

if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –ù–∞ Render –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è gunicorn.
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000))) 
