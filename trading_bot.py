import os
import json
import pandas as pd
import pandas_ta as ta
import joblib
import yfinance as yf
import telegram
from flask import Flask, request
import asyncio
from trading_strategy import run_backtest, run_backtest_local
import threading
import logging
import subprocess
import re
from signal_core import generate_signal_and_plot, generate_signal_and_plot_30m, TIMEFRAME
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è "–ª–µ–Ω–∏–≤–æ–π" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
# –û–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ Gunicorn.
_background_loop = None
_loop_thread = None
_thread_lock = threading.Lock()

def get_background_loop():
    """–õ–µ–Ω–∏–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç event loop –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
    global _background_loop, _loop_thread
    with _thread_lock:
        if _loop_thread is None:
            logging.info("Initializing background loop and thread for the first time in this worker...")
            _background_loop = asyncio.new_event_loop()
            
            def start_loop(loop):
                asyncio.set_event_loop(loop)
                loop.run_forever()

            _loop_thread = threading.Thread(target=start_loop, args=(_background_loop,), daemon=True)
            _loop_thread.start()
            logging.info("Background loop and thread have been started.")
    return _background_loop

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –∏—Ö –Ω–µ —É–¥–∞–ª–∏–ª —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
background_tasks = set()

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID') # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
MODEL_FILE = 'ml_model_final_fix.joblib'
PREDICTION_THRESHOLD = 0.67 # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è live-—Å–∏–≥–Ω–∞–ª–æ–≤
LOOKBACK_PERIOD = 20
SUBSCRIBERS_FILE = 'subscribers.json'

# --- 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ ---
def get_subscribers():
    """–ß–∏—Ç–∞–µ—Ç ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SUBSCRIBERS_FILE):
        return []
    with open(SUBSCRIBERS_FILE, 'r') as f:
        return json.load(f)

def add_subscriber(chat_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id not in subscribers:
        subscribers.append(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

def remove_subscriber(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."""
    subscribers = get_subscribers()
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        with open(SUBSCRIBERS_FILE, 'w') as f:
            json.dump(subscribers, f)
        return True
    return False

# --- 3. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
def get_live_data():
    """'–ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–∞—è' –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        eurusd_data = yf.download(tickers='EURUSD=X', period='5d', interval='30m')
        if isinstance(eurusd_data.columns, pd.MultiIndex):
            eurusd_data.columns = eurusd_data.columns.get_level_values(0)

        if eurusd_data.empty:
            print("–†—ã–Ω–æ–∫ EUR/USD –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None
            
        dxy_data = yf.download(tickers='DX-Y.NYB', period='5d', interval='30m')
        if isinstance(dxy_data.columns, pd.MultiIndex):
            dxy_data.columns = dxy_data.columns.get_level_values(0)

        if dxy_data.empty:
            print("–†—ã–Ω–æ–∫ DXY –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return None

        eurusd_data.reset_index(inplace=True)
        dxy_data.reset_index(inplace=True)

        date_col = next(col for col in ['Datetime', 'Date', 'index'] if col in eurusd_data.columns)
        eurusd_data.rename(columns={date_col: 'Datetime'}, inplace=True)
        date_col = next(col for col in ['Datetime', 'Date', 'index'] if col in dxy_data.columns)
        dxy_data.rename(columns={date_col: 'Datetime'}, inplace=True)
        
        eurusd_data.ta.rsi(length=14, append=True)
        eurusd_data.ta.macd(fast=12, slow=26, signal=9, append=True)
        eurusd_data.ta.atr(length=14, append=True)
        eurusd_data.rename(columns={'RSI_14':'RSI', 'MACD_12_26_9':'MACD', 'MACDh_12_26_9':'MACD_hist', 'MACDs_12_26_9':'MACD_signal', 'ATRr_14':'ATR'}, inplace=True)
        
        eurusd_data.set_index('Datetime', inplace=True)
        dxy_data.set_index('Datetime', inplace=True)
        
        dxy_data_renamed = dxy_data.rename(columns={'Low': 'DXY_Low'})
        data = pd.concat([eurusd_data, dxy_data_renamed['DXY_Low']], axis=1)
        data.dropna(inplace=True)
        
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        return data
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_signal_30m(model):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ 30-–º–∏–Ω—É—Ç–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ."""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = get_live_data()
        if data is None: return "–†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."

        last_bar = data.iloc[-2]
        previous_bars = data.iloc[-22:-2]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
        is_trading_time = 13 <= last_bar.name.hour <= 17
        dxy_raid = last_bar['DXY_Low'] < previous_bars['DXY_Low'].min()
        eurusd_judas_swing = last_bar['High'] > previous_bars['High'].max()
        
        if is_trading_time and dxy_raid and eurusd_judas_swing:
            features = pd.DataFrame([{
                'RSI': last_bar['RSI'],
                'MACD': last_bar['MACD'],
                'MACD_hist': last_bar['MACD_hist'],
                'MACD_signal': last_bar['MACD_signal'],
                'ATR': last_bar['ATR']
            }])
            win_probability = model.predict_proba(features)[0][1]

            if win_probability >= 0.4:
                entry_price = data.iloc[-1]['Open']
                sl = entry_price * (1 + 0.004)
                tp = entry_price * (1 - 0.01)
                
                message = (
                    f"üö® –°–ò–ì–ù–ê–õ (M30) üö®\n"
                    f"üîî **Short EURUSD**\n"
                    f"üìà **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å TP:** {win_probability:.2%}\n"
                    f"üîµ **–í—Ö–æ–¥:** `{entry_price:.5f}`\n"
                    f"üî¥ **Stop-Loss:** `{sl:.5f}`\n"
                    f"üü¢ **Take-Profit:** `{tp:.5f}`\n"
                    f"üïó **–í—Ä–µ–º—è:** `{last_bar.name.strftime('%Y-%m-%d %H:%M:%S UTC')}`"
                )
                return message
            else:
                return f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–µ—Ç–∞–ø –µ—Å—Ç—å, –Ω–æ ML-—Ñ–∏–ª—å—Ç—Ä ({win_probability:.2%}) –Ω–µ –ø—Ä–æ–π–¥–µ–Ω."
        else:
            return f"–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ M30. –í—Ä–µ–º—è: {data.iloc[-1].name.strftime('%Y-%m-%d %H:%M:%S UTC')}"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}"

async def run_backtest_async(chat_id, threshold):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞."""
    logging.info(f"Executing run_backtest_async for chat_id {chat_id} with threshold {threshold}.")
    try:
        # 1. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ
        await bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—É—Å–∫–∞—é –±—ç–∫—Ç–µ—Å—Ç —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –±—ç–∫—Ç–µ—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è event loop
        stats, plot_file = await asyncio.to_thread(run_backtest, threshold)
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if plot_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:\n\n<pre>{stats}</pre>", parse_mode='HTML')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML-–æ—Ç—á–µ—Ç
            with open(plot_file, 'rb') as f:
                await bot.send_document(chat_id, document=f, caption=f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±—ç–∫—Ç–µ—Å—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}")
            os.remove(plot_file) # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        else:
            # –ï—Å–ª–∏ –±—ç–∫—Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è, stats —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
            
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—É—Ç–∏ –∫ –≥—Ä–∞—Ñ–∏–∫—É
def parse_signal_output(output):
    lines = output.strip().split('\n')
    message_lines = []
    image_path = None
    for line in lines:
        if line.startswith('GRAPH_PATH:'):
            image_path = line.split(':', 1)[1].strip()
        else:
            message_lines.append(line)
    message = '\n'.join(message_lines)
    return message, image_path

async def handle_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not update.message or not update.message.text:
        return

    chat_id = update.message.chat.id
    text = update.message.text
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")

    command = text.split()[0]

    if command == '/start':
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º M5 (SMC) –∏ M30 (SMC+AI).\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã\n"
            "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
            "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            "/backtest - –ë—ç–∫—Ç–µ—Å—Ç M30 –Ω–∞ –¥–∞–Ω–Ω—ã—Ö Yahoo\n"
            "/backtest_local 0.55 - –õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç M30\n"
            "/fullbacktest - –ü–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∑–∞ 3 –≥–æ–¥–∞"
        )
    elif command == '/subscribe':
        if add_subscriber(chat_id):
            await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã!")
        else:
            await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    elif command == '/unsubscribe':
        if remove_subscriber(chat_id):
            await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.")
        else:
            await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    elif command == '/check':
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ M5 –∏ M30...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        loop = get_background_loop()
        task = asyncio.run_coroutine_threadsafe(check_and_send_signals_to_chat(chat_id), loop)
        background_tasks.add(task)
        task.add_done_callback(background_tasks.discard)
    elif command == '/backtest':
        await backtest(update, context) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    elif command == '/backtest_local':
        await backtest_local(update, context) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    elif command == '/fullbacktest':
        await fullbacktest(update, context)
    else:
        await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ '{text}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

async def send_signal_to_chat(chat_id, signal_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Å—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    signal, entry, sl, tp, last_bar, image_path, timeframe = signal_data

    if not signal:
        # await bot.send_message(chat_id, f"({timeframe}) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ç–∞–ø–∞ –Ω–µ—Ç.")
        return

    message = (
        f"üö® –°–ò–ì–ù–ê–õ ({timeframe}) üö®\n"
        f"üîî **Short EURUSD**\n"
        f"üîµ **–í—Ö–æ–¥:** `{entry:.5f}`\n"
        f"üî¥ **Stop-Loss:** `{sl:.5f}`\n"
        f"üü¢ **Take-Profit:** `{tp:.5f}`\n"
        f"üïó **–í—Ä–µ–º—è —Å–µ—Ç–∞–ø–∞:** `{last_bar.name.strftime('%Y-%m-%d %H:%M:%S UTC')}`"
    )
    
    try:
        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as img:
                await bot.send_photo(chat_id, photo=img, caption=message)
        else:
            await bot.send_message(chat_id, message)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ —á–∞—Ç {chat_id}: {e}")

async def check_and_send_signals_to_chat(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–∞ –¢–§ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ M5
        signal_data_5m = generate_signal_and_plot()
        if signal_data_5m[0]: # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª
            await send_signal_to_chat(chat_id, signal_data_5m)
        else:
            await bot.send_message(chat_id, "–ù–∞ M5 —Å–µ—Ç–∞–ø–∞ –Ω–µ—Ç.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ M30
        signal_data_30m = generate_signal_and_plot_30m()
        if signal_data_30m[0]: # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª
            await send_signal_to_chat(chat_id, signal_data_30m)
        else:
            await bot.send_message(chat_id, "–ù–∞ M30 —Å–µ—Ç–∞–ø–∞ –Ω–µ—Ç.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# --- 4. –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –†–æ—É—Ç—ã ---
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤—ã–π event loop."""
    try:
        update_data = request.get_json(force=True)
        logging.info(f"Webhook received: {update_data}")
        update = telegram.Update.de_json(update_data, bot)
        
        # –ü–æ–ª—É—á–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º) —Ñ–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª
        loop = get_background_loop()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º coroutine –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ (fire-and-forget)
        asyncio.run_coroutine_threadsafe(handle_update(update), loop)
        logging.info("handle_update task scheduled successfully.")
        
    except Exception:
        logging.error("An error occurred in the webhook handler.", exc_info=True)
    
    return 'ok'

@app.route('/check', methods=['GET'])
def check_route():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (UptimeRobot)."""
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /check –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
    try:
        loop = get_background_loop()
        task = asyncio.run_coroutine_threadsafe(check_and_send_to_subscribers(), loop)
        background_tasks.add(task)
        task.add_done_callback(background_tasks.discard)
        return "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞.", 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /check: {e}")
        return f"–û—à–∏–±–∫–∞: {e}", 500

async def check_and_send_to_subscribers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–∞ –¢–§ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."""
    subscribers = get_subscribers()
    if not subscribers:
        logging.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    logging.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ–¥–∏–Ω —Ä–∞–∑
    try:
        signal_data_5m = generate_signal_and_plot()
        signal_data_30m = generate_signal_and_plot_30m()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return

    # –†–∞—Å—Å—ã–ª–∞–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for sub_id in subscribers:
        if signal_data_5m and signal_data_5m[0]:
            await send_signal_to_chat(sub_id, signal_data_5m)
        if signal_data_30m and signal_data_30m[0]:
            await send_signal_to_chat(sub_id, signal_data_30m)
            
    logging.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@app.route('/')
def index():
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤."""
    return "Telegram Bot is running!"

async def backtest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º 0.55."""
    threshold = 0.55
    await update.message.reply_text('–ó–∞–ø—É—Å–∫–∞—é –±—ç–∫—Ç–µ—Å—Ç —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ Yahoo...')
    
    try:
        stats, plot_filename = run_backtest(threshold)
        if plot_filename:
            await update.message.reply_document(
                document=open(plot_filename, 'rb'),
                caption=f"üìà **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ (Yahoo)**\n\n{format_stats_for_telegram(stats)}"
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

async def backtest_local(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ."""
    try:
        threshold_str = context.args[0]
        threshold = float(threshold_str)
        if not (0 <= threshold <= 1):
            raise ValueError("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1.")
    except (IndexError, ValueError):
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /backtest_local 0.55')
        return

    chat_id = update.message.chat.id
    
    loop = get_background_loop()
    task = asyncio.run_coroutine_threadsafe(run_backtest_local_async(chat_id, threshold), loop)
    background_tasks.add(task)
    task.add_done_callback(background_tasks.discard)

async def run_backtest_local_async(chat_id, threshold):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç."""
    logging.info(f"–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {chat_id} —Å –ø–æ—Ä–æ–≥–æ–º {threshold}.")
    await bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—É—Å–∫–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        stats, plot_file = await asyncio.to_thread(
            run_backtest_local, 
            'EURUSD_Candlestick_30_m_BID_18.06.2022-18.06.2025 (2).csv', 
            'DOLLAR.IDXUSD_Candlestick_30_m_BID_18.06.2022-18.06.2025 (2).csv',
            threshold
        )
        
        if plot_file and os.path.exists(plot_file):
            await bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:\n\n<pre>{stats}</pre>", parse_mode='HTML')
            with open(plot_file, 'rb') as f:
                await bot.send_document(chat_id, document=f, caption=f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –±—ç–∫—Ç–µ—Å—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}")
            os.remove(plot_file)
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        await bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def fullbacktest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö."""
    chat_id = update.message.chat.id
    loop = get_background_loop()
    task = asyncio.run_coroutine_threadsafe(run_fullbacktest_async(chat_id), loop)
    background_tasks.add(task)
    task.add_done_callback(background_tasks.discard)

async def run_fullbacktest_async(chat_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç."""
    threshold = 0.55
    eurusd_file = 'EURUSD_Candlestick_30_m_BID_18.06.2022-18.06.2025 (2).csv'
    dxy_file = 'DOLLAR.IDXUSD_Candlestick_30_m_BID_18.06.2022-18.06.2025 (2).csv'

    logging.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {chat_id} —Å –ø–æ—Ä–æ–≥–æ–º {threshold}.")
    await bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
        if not os.path.exists(eurusd_file) or not os.path.exists(dxy_file):
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ `{eurusd_file}` –∏ `{dxy_file}` –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        stats, plot_file = await asyncio.to_thread(
            run_backtest_local, 
            eurusd_file, 
            dxy_file,
            threshold
        )
        
        if plot_file and os.path.exists(plot_file):
            stats_text = format_stats_for_telegram(stats)
            await bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞:\n\n{stats_text}", parse_mode='Markdown')
            
            with open(plot_file, 'rb') as f:
                await bot.send_document(chat_id, document=f, caption=f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª–Ω–æ–º—É –±—ç–∫—Ç–µ—Å—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {threshold}")
            os.remove(plot_file)
        else:
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {stats}")
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        await bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        model = joblib.load(MODEL_FILE)
        logging.info("ML –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª—å: {e}")
        model = None

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", handle_update))
    application.add_handler(CommandHandler("subscribe", handle_update))
    application.add_handler(CommandHandler("unsubscribe", handle_update))
    application.add_handler(CommandHandler("check", handle_update))
    application.add_handler(CommandHandler("backtest", backtest))
    application.add_handler(CommandHandler("backtest_local", backtest_local))
    application.add_handler(CommandHandler("fullbacktest", fullbacktest))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling() 
