import pandas as pd
import pandas_ta as ta
import joblib
import yfinance as yf
import numpy as np
import time

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
MODEL_FILE = 'ml_model_final_fix.joblib'
PREDICTION_THRESHOLD = 0.55
LOOKBACK_PERIOD = 20

# --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def get_historical_data(period='2mo', interval='30m'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period}...")
    for attempt in range(3): # 3 –ø–æ–ø—ã—Ç–∫–∏
        try:
            eurusd_data = yf.download(tickers='EURUSD=X', period=period, interval=interval, progress=False)
            if eurusd_data.empty:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –ø–æ EUR/USD –ø—É—Å—Ç—ã–µ.")
            
            dxy_data = yf.download(tickers='DX-Y.NYB', period=period, interval=interval, progress=False)
            if dxy_data.empty:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –ø–æ DXY –ø—É—Å—Ç—ã–µ.")

            # –ï—Å–ª–∏ –æ–±–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ø–µ—à–Ω—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            break
        except Exception as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < 2:
                print("–ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(5)
            else:
                print("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å.")
                return None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ trading_bot.py)
    eurusd_data.ta.rsi(length=14, append=True)
    eurusd_data.ta.macd(fast=12, slow=26, signal=9, append=True)
    eurusd_data.ta.atr(length=14, append=True)
    eurusd_data.rename(columns={'RSI_14':'RSI', 'MACD_12_26_9':'MACD', 'MACDh_12_26_9':'MACD_hist', 'MACDs_12_26_9':'MACD_signal', 'ATRr_14':'ATR'}, inplace=True)
    
    dxy_data_renamed = dxy_data.rename(columns={'Low': 'DXY_Low'})
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º merge –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–≤–º–µ—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    data = pd.merge(eurusd_data, dxy_data_renamed['DXY_Low'], left_index=True, right_index=True, how='inner')
    data.dropna(inplace=True)
    
    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
    return data

# --- 3. –õ–æ–≥–∏–∫–∞ –±–µ–∫—Ç–µ—Å—Ç–∞ ---
def run_backtest():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–∫—Ç–µ—Å—Ç –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("--- –ù–∞—á–∞–ª–æ –±–µ–∫—Ç–µ—Å—Ç–∞ ---")
    try:
        ml_model = joblib.load(MODEL_FILE)
        print(f"–ú–æ–¥–µ–ª—å '{MODEL_FILE}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except FileNotFoundError:
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª –º–æ–¥–µ–ª–∏ {MODEL_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
        return

    data = get_historical_data()
    if data is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –±–µ–∫—Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return

    signals_found = 0
    print(f"\\n–ê–Ω–∞–ª–∏–∑ {len(data)} —Å–≤–µ—á–µ–π. –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {data.index[0]} –ø–æ {data.index[-1]}")
    print("--------------------------------------------------")

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –¥–∞–Ω–Ω—ã–º, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø–µ—Ä–≤—ã–π –ø–µ—Ä–∏–æ–¥, –Ω—É–∂–Ω—ã–π –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã
    for i in range(LOOKBACK_PERIOD, len(data)):
        
        current_candle = data.iloc[i]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤ (13:00 - 17:00 UTC)
        current_hour = current_candle.name.hour
        if not (13 <= current_hour <= 17):
            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≤–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º—É–º–æ–≤/–º–∏–Ω–∏–º—É–º–æ–≤
        start_index = i - LOOKBACK_PERIOD
        end_index = i 
        lookback_data = data.iloc[start_index:end_index]

        # –£—Å–ª–æ–≤–∏—è —Å–µ—Ç–∞–ø–∞
        eurusd_judas_swing = current_candle['High'] > lookback_data['High'].max()
        dxy_raid = current_candle['DXY_Low'] < lookback_data['DXY_Low'].min()
        
        if eurusd_judas_swing and dxy_raid:
            print(f"\\n–ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ—Ç–∞–ø –≤ {current_candle.name}...")
            
            features = [current_candle[col] for col in ['RSI', 'MACD', 'MACD_hist', 'MACD_signal', 'ATR']]
            if np.isnan(features).any():
                print("–ü—Ä–æ–ø—É—Å–∫: –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å NaN –∑–Ω–∞—á–µ–Ω–∏—è.")
                continue

            win_prob = ml_model.predict_proba([features])[0][1]
            print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ –º–æ–¥–µ–ª–∏: {win_prob:.2%}")

            if win_prob >= PREDICTION_THRESHOLD:
                signals_found += 1
                print(">>> !!! –°–ò–ì–ù–ê–õ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù !!! <<<")
                print(
                    f"üö® –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£ (SELL) EUR/USD üö®\\n"
                    f"  - –í—Ä–µ–º—è (UTC): {current_candle.name}\\n"
                    f"  - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {win_prob:.2%}\\n"
                )
    
    print("\\n--- –ë–µ–∫–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ---")
    if signals_found > 0:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_found}")
    else:
        print("‚ùå –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

if __name__ == "__main__":
    run_backtest() 