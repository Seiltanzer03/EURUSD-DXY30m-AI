import pandas as pd
import pandas_ta as ta
import joblib
import numpy as np
import time
import io
import os
import matplotlib.pyplot as plt
from alpha_vantage.foreignexchange import ForeignExchange
from alpha_vantage.timeseries import TimeSeries

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
MODEL_FILE = 'ml_model_final_fix.joblib'
PREDICTION_THRESHOLD = 0.55
LOOKBACK_PERIOD = 20
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ALPHA_VANTAGE_API_KEY = os.environ.get('ALPHA_VANTAGE_API_KEY')

# --- 2. –§—É–Ω–∫—Ü–∏–∏ ---

def get_historical_data_av(output_size='full'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Alpha Vantage."""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Alpha Vantage...")
    if not ALPHA_VANTAGE_API_KEY:
        raise ValueError("API-–∫–ª—é—á –¥–ª—è Alpha Vantage –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ALPHA_VANTAGE_API_KEY.")

    try:
        # --- –ó–∞–≥—Ä—É–∑–∫–∞ EUR/USD ---
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EUR/USD...")
        fx = ForeignExchange(key=ALPHA_VANTAGE_API_KEY, output_format='pandas')
        eurusd_data, _ = fx.get_currency_exchange_intraday('EUR', 'USD', interval='30min', outputsize=output_size)
        eurusd_data.rename(columns={
            '1. open': 'Open',
            '2. high': 'High',
            '3. low': 'Low',
            '4. close': 'Close'
        }, inplace=True)
        # Alpha Vantage –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–º –¥–ª—è FX, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ–ª–æ–Ω–∫—É
        eurusd_data['Volume'] = 0 
        eurusd_data.index = pd.to_datetime(eurusd_data.index)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(eurusd_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è EUR/USD.")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç API
        time.sleep(15)

        # --- –ó–∞–≥—Ä—É–∑–∫–∞ DXY ---
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è DXY...")
        ts = TimeSeries(key=ALPHA_VANTAGE_API_KEY, output_format='pandas')
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–∫–µ—Ä 'DXY' - –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–º–µ–Ω—É
        dxy_data, _ = ts.get_intraday(symbol='DXY', interval='30min', outputsize=output_size)
        dxy_data.rename(columns={
            '1. open': 'Open',
            '2. high': 'High',
            '3. low': 'Low',
            '4. close': 'Close',
            '5. volume': 'Volume'
        }, inplace=True)
        dxy_data.index = pd.to_datetime(dxy_data.index)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dxy_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è DXY.")

        return eurusd_data, dxy_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Alpha Vantage: {e}")
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—à–∏–±–∫–∞ 'Invalid API call' - —ç—Ç–æ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç—å, —á—Ç–æ DXY –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if 'Invalid API call' in str(e):
            print("–ü–æ—Ö–æ–∂–µ, —Ç–∏–∫–µ—Ä 'DXY' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ Intraday. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ä.")
        return None, None


def create_plot(data, signal_index, lookback_period):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."""
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 10), sharex=True)
    
    start_index = signal_index - lookback_period
    end_index = signal_index + 1
    plot_data = data.iloc[start_index:end_index]

    # –ì—Ä–∞—Ñ–∏–∫ EUR/USD
    ax1.plot(plot_data.index, plot_data['eurusd_Close'], label='EUR/USD Close', color='blue')
    ax1.scatter(plot_data.index[lookback_period], plot_data['eurusd_Close'].iloc[lookback_period], color='red', s=100, zorder=5, label='–°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞')
    ax1.set_title('EUR/USD')
    ax1.set_ylabel('–¶–µ–Ω–∞')
    ax1.legend()
    ax1.grid(True)
    
    # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã
    ax1.axvspan(plot_data.index[0], plot_data.index[lookback_period], color='gray', alpha=0.2, label='–ü–µ—Ä–∏–æ–¥ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã')

    # –ì—Ä–∞—Ñ–∏–∫ DXY
    ax2.plot(plot_data.index, plot_data['dxy_Close'], label='DXY Close', color='green')
    ax2.scatter(plot_data.index[lookback_period], plot_data['dxy_Close'].iloc[lookback_period], color='red', s=100, zorder=5)
    ax2.set_title('DXY (–ò–Ω–¥–µ–∫—Å –¥–æ–ª–ª–∞—Ä–∞)')
    ax2.set_xlabel('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è')
    ax2.set_ylabel('–¶–µ–Ω–∞')
    ax2.legend()
    ax2.grid(True)
    ax2.axvspan(plot_data.index[0], plot_data.index[lookback_period], color='gray', alpha=0.2)

    plt.xticks(rotation=45)
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)
    return buf


def run_backtest():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–∫—Ç–µ—Å—Ç–∞."""
    print("--- –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∞ ---")
    
    eurusd_data, dxy_data = get_historical_data_av(output_size='full')
    
    if eurusd_data is None or dxy_data is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ë–µ–∫—Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
        return []

    print("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data = pd.merge(eurusd_data, dxy_data, on='date', suffixes=('_eurusd', '_dxy'))
    data.rename(columns={
        'Open_eurusd': 'eurusd_Open', 'High_eurusd': 'eurusd_High', 'Low_eurusd': 'eurusd_Low', 'Close_eurusd': 'eurusd_Close', 'Volume_eurusd': 'eurusd_Volume',
        'Open_dxy': 'dxy_Open', 'High_dxy': 'dxy_High', 'Low_dxy': 'dxy_Low', 'Close_dxy': 'dxy_Close', 'Volume_dxy': 'dxy_Volume'
    }, inplace=True)
    
    print("–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    data.ta.rsi(length=14, append=True, col_names=('EURUSD_RSI_14'))
    data.ta.rsi(length=14, close=data['dxy_Close'], append=True, col_names=('DXY_RSI_14'))
    
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    model = joblib.load(MODEL_FILE)
    
    image_buffers = []
    print("\n--- –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ ---")
    
    for i in range(LOOKBACK_PERIOD, len(data)):
        segment = data.iloc[i-LOOKBACK_PERIOD:i]
        
        input_features = np.array([
            segment['EURUSD_RSI_14'].values,
            segment['DXY_RSI_14'].values
        ]).flatten().reshape(1, -1)
        
        try:
            prediction = model.predict_proba(input_features)[0][1]
            
            if prediction > PREDICTION_THRESHOLD:
                signal_time = data.index[i]
                print(f"üî• –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª!")
                print(f"   - –í—Ä–µ–º—è: {signal_time}")
                print(f"   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prediction:.2f}")
                
                plot_buffer = create_plot(data, i, LOOKBACK_PERIOD)
                image_buffers.append(plot_buffer)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ {i}: {e}")
            continue
            
    if not image_buffers:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∏–≥–Ω–∞–ª–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        print(f"\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(image_buffers)}.")
        
    return image_buffers

# –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == '__main__':
    run_backtest() 
